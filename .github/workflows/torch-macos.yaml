name: torch-macos

on:
  push:
    branches:
      - torch

  workflow_dispatch:
    inputs:
      version:
        description: "Version information (e.g., 2.3.1)"
        required: true

env:
  TORCH_VERSION:
    |- # Enter release tag name or version name in workflow_dispatch. Appropriate version if not specified
    ${{ github.event.release.tag_name || github.event.inputs.version || '2.3.1' }}

jobs:
  torch-macos:
    name: ${{ matrix.arch }} ${{ matrix.lib-type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            python-version: "3.8"
            lib-type: "shared"
            arch: "x64"

          - os: macos-13
            python-version: "3.8"
            lib-type: "static"
            arch: "x64"

          - os: macos-14
            python-version: "3.8"
            lib-type: "shared"
            arch: "arm64"

          - os: macos-14
            python-version: "3.8"
            lib-type: "static"
            arch: "arm64"

    steps:
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache build result for ${{ env.TORCH_VERSION }} ${{ matrix.lib-type }}
        id: cache-build-result
        uses: actions/cache@v4
        with:
          path: torch-osx-${{ matrix.arch }}-${{ matrix.lib-type }}-v${{ env.TORCH_VERSION }}.tar.bz2
          key: torch-osx-${{ matrix.arch }}-${{ matrix.lib-type }}-v${{ env.TORCH_VERSION }}

      - name: Download PyTorch ${{ env.TORCH_VERSION }}
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          version=${{ env.TORCH_VERSION }}
          curl -SL -O https://github.com/pytorch/pytorch/releases/download/v$version/pytorch-v$version.tar.gz
          tar xf pytorch-v$version.tar.gz

          mv pytorch-v$version torch-$version

          cd torch-$version

          # To fix the following error
          # https://github.com/csukuangfj/torch-libs/actions/runs/9709473947/job/26798232025#step:5:66
          # /usr/bin/ld: /home/runner/work/torch-libs/torch-libs/build/_deps/torch_libs-src/lib/libtorch_cpu.so: undefined reference to `torch::jit::LEGACY_deserialize(std::shared_ptr<torch::jit::CompilationUnit>, std::shared_ptr<caffe2::serialize::PyTorchStreamReader>, std::optional<c10::Device> const&)'

          sed -i.bak s'|^#if !defined(C10_MOBILE) && !defined(C10_DISABLE_LEGACY_IMPORT)|#if 0|'g ./torch/csrc/jit/serialization/import.cpp

          # To fix the following error
          # https://github.com/csukuangfj/torch-libs/actions/runs/9709473947/job/26798232025#step:5:67
          # /usr/bin/ld: /home/runner/work/torch-libs/torch-libs/build/_deps/torch_libs-src/lib/libtorch_cpu.so: undefined reference to `torch::jit::writeArchiveAndTensors(std::string const&, char const*, unsigned long, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, caffe2::serialize::PyTorchStreamWriter&)'
          sed -i.bak s'|^#ifndef C10_MOBILE|#if 0|'g ./torch/csrc/jit/serialization/pickle.cpp

      - name: Build torch ${{ env.TORCH_VERSION }} for ${{ matrix.arch }} ${{ matrix.lib-type }}
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          uname -a

          python3 --version
          python3 -m pip install ninja cmake

          which gcc python3 cmake

          gcc --version

          cmake --version
          version=${{ env.TORCH_VERSION }}
          cd torch-$version
          ls -lh
          pip install -r ./requirements.txt
          if [[ ${{ matrix.lib-type }} == "shared" ]]; then
            BUILD_SHARED_LIBS=ON
          else
            BUILD_SHARED_LIBS=OFF
          fi

          mkdir build
          cd build

          PYTHON_EXECUTABLE=$(which python3)
          echo "PYTHON_EXECUTABLE: $PYTHON_EXECUTABLE"

          cmake \
            -D PYTHON_EXECUTABLE=$PYTHON_EXECUTABLE \
            -D CMAKE_INSTALL_PREFIX="./install" \
            -D CMAKE_BUILD_TYPE=Release \
            -D BUILD_SHARED_LIBS=$BUILD_SHARED_LIBS \
            -D BUILD_CAFFE2_OPS=OFF \
            -D BUILD_CUSTOM_PROTOBUF=OFF \
            -D BUILD_LITE_INTERPRETER=OFF \
            -D BUILD_PYTHON=OFF \
            -D INTERN_BUILD_MOBILE=ON \
            -D INTERN_DISABLE_AUTOGRAD=ON \
            -D INTERN_DISABLE_ONNX=ON \
            -D USE_CUDA=OFF \
            -D USE_NCCL=OFF \
            -D USE_DISTRIBUTED=OFF \
            -D USE_ITT=OFF \
            -D USE_KINETO=OFF \
            -D USE_LITE_INTERPRETER_PROFILER=OFF \
            -D USE_MKLDNN=OFF \
            -D USE_MPS=OFF \
            -D USE_NUMPY=OFF \
            -D USE_OPENMP=OFF \
            -D USE_SOURCE_DEBUG_ON_MOBILE=OFF \
            -D USE_XNNPACK=OFF \
            \
            -D USE_NNPACK=OFF \
            -D USE_VALGRIND=OFF \
            ..
            make -j 4
            make install/strip

      - name: Display results
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd torch-${{ env.TORCH_VERSION }}

          sudo chown -R $USER ./build

          ls -lh build/install

          cd build

          dst=torch-osx-${{ matrix.arch }}-${{ matrix.lib-type }}-v${{ env.TORCH_VERSION }}

          mv install $dst

          tar cjvf $dst.tar.bz2 $dst

          mv $dst.tar.bz2 ../..

      - uses: actions/upload-artifact@v4
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        with:
          name: torch-osx-${{ matrix.arch }}-${{ matrix.lib-type }}-v${{ env.TORCH_VERSION }}
          path: ./*.tar.bz2

      - name: Publish to huggingface
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        uses: nick-fields/retry@v2
        with:
          max_attempts: 20
          timeout_seconds: 200
          shell: bash
          command: |
            git config --global user.email "csukuangfj@gmail.com"
            git config --global user.name "Fangjun Kuang"

            rm -rf huggingface
            export GIT_LFS_SKIP_SMUDGE=1
            export GIT_CLONE_PROTECTION_ACTIVE=false

            ls -lh

            git clone https://huggingface.co/csukuangfj/torch-libs huggingface
            cd huggingface
            git pull

            name=torch-osx-*.tar.bz2

            cp -v ../$name .

            git status
            git add .
            git commit -m "add $name"
            git push https://csukuangfj:$HF_TOKEN@huggingface.co/csukuangfj/torch-libs main
