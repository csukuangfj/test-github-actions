name: torch-android

on:
  push:
    branches:
      - torch

  workflow_dispatch:
    inputs:
      version:
        description: "Version information (e.g., 2.3.1)"
        required: true

env:
  TORCH_VERSION:
    |- # Enter release tag name or version name in workflow_dispatch. Appropriate version if not specified
    ${{ github.event.release.tag_name || github.event.inputs.version || '2.3.1' }}

jobs:
  torch-android:
    name: android ${{ matrix.shared_lib }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8"]
        shared_lib: [ON, OFF]

    steps:
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download PyTorch ${{ env.TORCH_VERSION }}
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          version=${{ env.TORCH_VERSION }}
          curl -SL -O https://github.com/pytorch/pytorch/releases/download/v$version/pytorch-v$version.tar.gz
          tar xf pytorch-v$version.tar.gz

          mv pytorch-v$version torch-$version

          cd torch-$version

          # To fix the following error
          # https://github.com/csukuangfj/torch-libs/actions/runs/9709473947/job/26798232025#step:5:66
          # /usr/bin/ld: /home/runner/work/torch-libs/torch-libs/build/_deps/torch_libs-src/lib/libtorch_cpu.so: undefined reference to `torch::jit::LEGACY_deserialize(std::shared_ptr<torch::jit::CompilationUnit>, std::shared_ptr<caffe2::serialize::PyTorchStreamReader>, std::optional<c10::Device> const&)'

          sed -i.bak s'|^#if !defined(C10_MOBILE) && !defined(C10_DISABLE_LEGACY_IMPORT)|#if 0|'g ./torch/csrc/jit/serialization/import.cpp

          # To fix the following error
          # https://github.com/csukuangfj/torch-libs/actions/runs/9709473947/job/26798232025#step:5:67
          # /usr/bin/ld: /home/runner/work/torch-libs/torch-libs/build/_deps/torch_libs-src/lib/libtorch_cpu.so: undefined reference to `torch::jit::writeArchiveAndTensors(std::string const&, char const*, unsigned long, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, caffe2::serialize::PyTorchStreamWriter&)'
          sed -i.bak s'|^#ifndef C10_MOBILE|#if 0|'g ./torch/csrc/jit/serialization/pickle.cpp



      - name: Install dependencies
        shell: bash
        run: |
          cd torch-${{ env.TORCH_VERSION }}
          pip install -r ./requirements.txt

          sudo apt-get install install -y tree

      # https://github.com/actions/setup-java
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '21'

      - name: Display NDK HOME
        shell: bash
        run: |
          echo "ANDROID_NDK_LATEST_HOME: ${ANDROID_NDK_LATEST_HOME}"
          ls -lh ${ANDROID_NDK_LATEST_HOME}

      - name: Build
        shell: bash
        run: |
          cd torch-${{ env.TORCH_VERSION }}
          # https://djl.ai/android/pytorch-native/

          sed -i.bak s/USE_VULKAN=ON/USE_VULKAN=OFF/g ./scripts/build_android.sh

          if [[ ${{ matrix.shared_lib }} == ON ]]; then
            sed -i.bak s/BUILD_SHARED_LIBS=OFF/BUILD_SHARED_LIBS=ON/g ./scripts/build_android.sh
          fi

          sed -i.bak s"/Use Vulkan GPU backend\" ON/Use Vulkan GPU backend\" OFF/g" ./CMakeLists.txt

          export BUILD_LITE_INTERPRETER=0

          export MAX_JOBS=4
          ./scripts/build_pytorch_android.sh arm64-v8a,armeabi-v7a,x86,x86_64

      - name: Display
        shell: bash
        run: |
          cd torch-${{ env.TORCH_VERSION }}
          echo '---build_android_arm64-v8a---'
          ls -lh build_android_arm64-v8a
          tree build_android_arm64-v8a

          echo '---build_android_armeabi-v7a---'
          ls -lh build_android_armeabi-v7a
          tree build_android_armeabi-v7a

          echo '---build_android_x86---'
          ls -lh build_android_x86
          tree build_android_x86

          echo '---build_android_x86_64---'
          ls -lh build_android_x86_64
          tree build_android_x86_64

      - name: Zip
        shell: bash
        run: |
          cd torch-${{ env.TORCH_VERSION }}

          cd build_android_arm64-v8a && zip -r ~/arm64-v8a_native.zip install/include lib && cd ..
          cd build_android_armeabi-v7a && zip -r ~/armeabi-v7a_native.zip install/include lib && cd ..
          cd build_android_x86 && zip -r ~/x86_native.zip install/include lib && cd ..
          cd build_android_x86_64 && zip -r ~/x86_64_native.zip install/include lib && cd ..

          ls -lh *.zip

          mv *native*.zip ..

      - uses: actions/upload-artifact@v4
        with:
          name: torch-${{ env.TORCH_VERSION }}
          path: ./*.zip
